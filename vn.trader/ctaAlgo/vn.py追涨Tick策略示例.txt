########################################################################################
## 基于tick级别策略测试demo

class ChasingTickDemo(CtaTemplate):
    """策略名称：追涨Tick示例；
    策略思想：连续3笔tick买一价大于上一笔tick的买一价，买入；固定止赢和固定止损；
    使用方法：1、将此段代码加入ctaDemo.py文件；2、修改CTA_setting.json文件内容,配置股指IF1604；  3、在ctaSetting.py增加策略信息；
    编写时间：20160322，这只是一个示例，切勿实盘"""

    className = 'ChasingtickDemo'
    author = u'王衣谷'

    # 策略参数
    takeProfitPoint = 2  #止赢点数
    stopLossPoint = 1   #止损点数
    # 策略变量

    # 参数列表，保存了参数的名称
    paramList = ['name',
                 'className',
                 'author',
                 'vtSymbol']

    # 变量列表，保存了变量的名称
    varList = ['inited',
               'trading',
               'pos']

    #----------------------------------------------------------------------
    def __init__(self, ctaEngine, setting):
        """Constructor"""
        super(ChasingTickDemo, self).__init__(ctaEngine, setting)

        self.lastOrder = None
        self.lastTrade = None
        self.tickList = [] #初始一个tick列表
        self.bType = 0 #买的状态，1表示买开委托状态，0表示非买开委托状态.目的是判断当前委托的状态，不要发生重复发单的事情
        self.sType = 0 #买的状态，1表示卖开委托状态，0表示非卖开委托状态

    #----------------------------------------------------------------------
    def onInit(self):
        """初始化策略（必须由用户继承实现）"""
        self.writeCtaLog(u'追涨Tick演示策略初始化')

    #----------------------------------------------------------------------
    def onStart(self):
        """启动策略（必须由用户继承实现）"""
        self.writeCtaLog(u'追涨Tick演示策略启动')
        self.putEvent()

    #----------------------------------------------------------------------
    def onStop(self):
        """停止策略（必须由用户继承实现）"""
        self.writeCtaLog(u'追涨Tick演示策略停止')
        self.putEvent()

    #----------------------------------------------------------------------
    def onTick(self, tick):
        """收到行情TICK推送（必须由用户继承实现）"""
        #当新tick来的时候进行数据保存，保存4个tick的数据，
        self.tickList.append(tick)    #往列表后面增加新tick数据
        if len(self.tickList) > 4:   #如果数据长度大于4，则要进行删除动作
            del self.tickList[0]     #老数据从列表头部删掉

        #开单条件：连续3笔tick买一价大于上一笔tick的买一价，买入；反之卖出
        isBuySign = 0
        isShortSign = 0
        if len(self.tickList)>=4:
            isBuySign   = self.tickList[3].bidPrice1 > self.tickList[2].bidPrice1 and self.tickList[2].bidPrice1 > self.tickList[1].bidPrice1 and  self.tickList[1].bidPrice1 > self.tickList[0].bidPrice1
            isShortSign = self.tickList[3].askPrice1 < self.tickList[2].askPrice1 and self.tickList[2].askPrice1 < self.tickList[1].askPrice1 and  self.tickList[1].askPrice1 < self.tickList[0].askPrice1
        #开多单
        if isBuySign:
            # 如果买开时手头没有持仓，则直接对价做多
            if self.pos == 0 and self.bType == 0 and self.sType == 0:
                self.buy(tick.askPrice1, 1)
                self.bType = 1
                self.writeCtaLog(u'直接多开，买开价：'+str(tick.askPrice1))
            # 如果有空头持仓，则先平空，再做多
            elif self.pos < 0 and self.bType == 0:
                self.cover(tick.askPrice1, 1)
                self.sType = 0
                self.buy(tick.askPrice1, 1)
                self.bType = 1
                self.writeCtaLog(u'先空平再多开，买开价：'+str(tick.askPrice1))
        # 卖开和买开相反
        elif isShortSign:
            if self.pos == 0 and self.bType == 0 and self.sType == 0:
                self.short(tick.bidPrice1, 1)
                self.sType = 1
                self.writeCtaLog(u'直接空开，卖开价：'+str(tick.bidPrice1))
            elif self.pos > 0 and self.sType == 0:
                self.sell(tick.bidPrice1, 1)
                self.bType = 0
                self.short(tick.bidPrice1, 1)
                self.sType = 1
                self.writeCtaLog(u'先多平再空开，卖开价：'+str(tick.bidPrice1))

        # 固定止赢处理
        self.fixedTakeProfit()
        # 固定止损处理
        self.fixedStopLoss()

    #----------------------------------------------------------------------
    def onBar(self, bar):
        """收到Bar推送（必须由用户继承实现）"""
        pass

    #----------------------------------------------------------------------
    def onOrder(self, order):
        """收到委托变化推送（必须由用户继承实现）"""
        # 对于无需做细粒度委托控制的策略，可以忽略onOrder
        pass

    #----------------------------------------------------------------------
    def onTrade(self, trade):
        """收到成交推送（必须由用户继承实现）"""
        # 对于无需做细粒度委托控制的策略，可以忽略onTrade
        self.lastTrade = trade

    #----------------------------------------------------------------------
    def fixedTakeProfit(self):
        """固定止赢处理,以股指示例，2个点止赢"""
        if self.bType == 1 and self.pos > 0:
            if self.tickList[3].lastPrice - self.lastTrade.price > self.takeProfitPoint: #如果多单赢利大于2个点
                self.sell(self.tickList[3].bidPrice1, 1)
                self.bType = 0
                self.writeCtaLog(u'多单固定止盈,--平仓价：' + str(self.tickList[3].bidPrice1) + u'--赢利点数：' + str(self.tickList[3].bidPrice1-self.lastTrade.price))
        elif self.sType == 1 and self.pos < 0:
            if self.lastTrade.price - self.tickList[3].lastPrice > self.takeProfitPoint: #如果空单赢利大于2个点
                self.cover(self.tickList[3].askPrice1, 1)
                self.sType = 0
                self.writeCtaLog(u'空单固定止盈,--平仓价：' + str(self.tickList[3].askPrice1) + u'--赢利点数：' + str(self.lastTrade.price-self.tickList[3].askPrice1) )

    #----------------------------------------------------------------------
    def fixedStopLoss(self):
        """固定止损处理,以股指示例，1个点止损"""
        if self.bType == 1 and self.pos > 0:
            if  self.lastTrade.price - self.tickList[3].lastPrice > self.stopLossPoint: #如果多单亏损大于1个点
                self.sell(self.tickList[3].bidPrice1, 1)
                self.bType = 0
                self.writeCtaLog(u'多单固定止损,--平仓价：' + str(self.tickList[3].bidPrice1) + u'--亏损点数：' + str(self.tickList[3].bidPrice1-self.lastTrade.price))
        elif self.sType == 1 and self.pos < 0:
            if self.tickList[3].lastPrice - self.lastTrade.price > self.stopLossPoint: #如果空单亏损大于1个点
                self.cover(self.tickList[3].askPrice1, 1)
                self.sType = 0
                self.writeCtaLog(u'空单固定止损,--平仓价：' + str(self.tickList[3].askPrice1) + u'--亏损点数：' + str(self.lastTrade.price-self.tickList[3].askPrice1) )
